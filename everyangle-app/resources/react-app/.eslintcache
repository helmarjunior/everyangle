[{"/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/index.js":"1","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/reportWebVitals.js":"2","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/App.js":"3","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/components/player.js":"4","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/components/categories.js":"5","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/helpers/HttpRequests.js":"6","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/components/media.js":"7"},{"size":500,"mtime":1611248584234,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611248584236,"results":"10","hashOfConfig":"9"},{"size":2011,"mtime":1611273407707,"results":"11","hashOfConfig":"9"},{"size":918,"mtime":1611273423522,"results":"12","hashOfConfig":"9"},{"size":7387,"mtime":1611270301629,"results":"13","hashOfConfig":"9"},{"size":4445,"mtime":1611265968611,"results":"14","hashOfConfig":"9"},{"size":8163,"mtime":1611270273202,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1h1t1vs",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/index.js",[],["34","35"],"/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/reportWebVitals.js",[],"/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/App.js",["36","37"],"import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { Container, Row, Col, Jumbotron } from \"reactstrap\";\nimport React, { useEffect, useState } from \"react\";\nimport Player from \"./components/player\";\nimport Categories from \"./components/categories\";\nimport Media from \"./components/media\";\n\nfunction App() {\n    const [category, setCategory] = useState(0);\n    const [media, setMedia] = useState({});\n    return (\n        <div className=\"App\">\n            <ToastContainer />\n            <Container>\n                <div></div>\n                <Row>\n                    <Col xs=\"6\" sm=\"5\" lg=\"5\">\n                        <Jumbotron>\n                            <h3 className=\"display-3\">Media Library</h3>\n                            <p className=\"lead\">\n                                Curate your own media libraries.\n                            </p>\n                        </Jumbotron>\n                    </Col>\n                    <Col xs=\"6\" sm=\"6\" lg=\"6\">\n                        <Player media={media} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"6\" sm=\"4\" lg=\"4\">\n                        <h3>Categories</h3>\n                        <Categories\n                            setCategory={(id) => {\n                                setCategory(id);\n                                setMedia({});\n                            }}\n                        />\n                    </Col>\n                    <Col xs=\"6\" sm=\"8\" lg=\"8\">\n                        <h3>Media</h3>\n                        <Media\n                            category={category}\n                            setMedia={(media) => {\n                                setMedia(media);\n                            }}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/components/player.js",["38","39"],"import React, { Component, useEffect, useState } from \"react\";\nimport ReactWebMediaPlayer from \"react-web-media-player\";\nconst API_HOST = \"http://localhost:8000/api\";\nconst Player = (props) => {\n    const [url, setUrl] = useState(null);\n    const [fileName, setFileName] = useState(null);\n\n    useEffect(() => {\n        const media = props.media;\n\n        if (media.id) {\n            setUrl(`${API_HOST}/media/${media.id}`);\n            setFileName(media.original_file_name);\n        } else {\n            setUrl(null);\n            setFileName(null);\n        }\n    }, [props.media.id]);\n    return url ? (\n        <ReactWebMediaPlayer\n            width={500}\n            height={350}\n            title={fileName}\n            thumbnail={\"/assets/music.jpg\"}\n            // audio={url}\n            video={url}\n            autoplay={true}\n        />\n    ) : (\n        \"Select the media.\"\n    );\n};\n\nexport default Player;\n","/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/components/categories.js",[],"/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/helpers/HttpRequests.js",[],"/Users/helmar/Documents/dev/helmar/laravel7-docker/everyangle-app/resources/react-app/src/components/media.js",["40","41","42","43"],"import React, { useEffect, useState } from \"react\";\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\nimport {\n    ListGroup,\n    ListGroupItem,\n    ButtonGroup,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    Form,\n    FormGroup,\n    Col,\n} from \"reactstrap\";\nimport {\n    getRequest,\n    putRequest,\n    postRequest,\n    deleteRequest,\n} from \"../helpers/HttpRequests\";\nimport { toast } from \"react-toastify\";\n\nconst Media = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [medias, setMedias] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [currentItem, setCurrentItem] = useState({});\n    const [modal, setModal] = useState(false);\n\n    useEffect(() => {\n        loadMedias();\n    }, [props.category]);\n\n    const loadMedias = () => {\n        const cbFunction = (cbData, response) => {\n            setMedias(response.data);\n        };\n\n        const endpoint =\n            props.category > 0 ? `/media?category=${props.category}` : \"/media\";\n\n        getRequest(endpoint, null, cbFunction);\n    };\n\n    const deleteItem = (item) => {\n        confirmAlert({\n            title: \"Confirm to submit\",\n            message: \"Are you sure to do this.\",\n            buttons: [\n                {\n                    label: \"Yes\",\n                    onClick: () => {\n                        const cbFunction = (cbData, response) => {\n                            loadMedias();\n                            if (response !== null) {\n                                toast.success(\"deleted successfully.\", {\n                                    position: toast.POSITION.TOP_RIGHT,\n                                });\n                            }\n                        };\n                        deleteRequest(`/media/${item.id}`, null, cbFunction);\n                    },\n                },\n                {\n                    label: \"No\",\n                },\n            ],\n        });\n    };\n\n    const toggleModal = (item) => {\n        setModal(!modal);\n    };\n\n    const setValue = (key, value) => {\n        setCurrentItem((prevState) => ({\n            ...prevState,\n            [key]: value,\n        }));\n    };\n\n    const loadCategories = () => {\n        const cbFunction = (cbData, response) => {\n            if (response !== null) {\n                setCategories(response.data);\n                setValue(\"category\", response.data[0].id);\n            }\n        };\n        getRequest(\"/category\", null, cbFunction);\n    };\n\n    const saveForm = async () => {\n        /* sanitize */\n        if (!currentItem.files) {\n            return;\n        }\n\n        const total = currentItem.files.length;\n        var total_cb_received = 0;\n        for (let i = 0; i < total; i++) {\n            let formData = new FormData();\n            formData.append(\"category_id\", currentItem.category);\n            formData.append(\"files[]\", currentItem.files[i]);\n\n            var cbFunction = (cbData, response) => {\n                total_cb_received += 1;\n\n                if (total_cb_received == total) {\n                    setIsLoading(false);\n                    setCurrentItem({});\n                    loadMedias();\n                    toggleModal();\n                    toast.info(\"Files Processed.\", {\n                        position: toast.POSITION.TOP_RIGHT,\n                    });\n                }\n            };\n\n            setIsLoading(true);\n            postRequest(\"/media\", formData, cbFunction, null, true);\n        }\n    };\n\n    return (\n        <>\n            <Button\n                color=\"success\"\n                size=\"sm\"\n                className=\"mb-1\"\n                onClick={() => {\n                    setCurrentItem({});\n                    loadCategories();\n                    toggleModal();\n                }}\n            >\n                Upload Media\n            </Button>\n            <ListGroup className=\"media-list\">\n                {medias.map((e, key) => {\n                    return (\n                        <ListGroupItem\n                            key={key}\n                            className=\"justify-content-between text-left\"\n                        >\n                            <span onClick={() => props.setMedia(e)}>\n                                {e.original_file_name}\n                            </span>{\" \"}\n                            <ButtonGroup className=\"float-right\">\n                                <Button\n                                    color=\"info\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                        props.setMedia(e)\n                                    }}\n                                >\n                                    Play\n                                </Button>\n                                <Button\n                                    color=\"secondary\"\n                                    size=\"sm\"\n                                    onClick={() => deleteItem(e)}\n                                >\n                                    X\n                                </Button>\n                            </ButtonGroup>\n                        </ListGroupItem>\n                    );\n                })}\n            </ListGroup>\n            <Modal isOpen={modal} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>New Media</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup row>\n                            <Label sm={3}>Category</Label>\n                            <Col sm={9}>\n                                <Input\n                                    type=\"select\"\n                                    name=\"category\"\n                                    onChange={(event) =>\n                                        setValue(\n                                            event.target.name,\n                                            event.target.value\n                                        )\n                                    }\n                                >\n                                    {categories.map((e, key) => {\n                                        return (\n                                            <option key={key} value={e.id}>\n                                                {e.name}\n                                            </option>\n                                        );\n                                    })}\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label sm={3}>Description</Label>\n                            <Col sm={9}>\n                                <Input\n                                    type=\"file\"\n                                    multiple\n                                    name=\"files\"\n                                    accept=\".png, .jpeg, ,.mp3, .wav\"\n                                    className=\"multiple-upload\"\n                                    onChange={(event) =>\n                                        setValue(\n                                            event.target.name,\n                                            event.target.files\n                                        )\n                                    }\n                                />\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button\n                        color=\"primary\"\n                        disabled={isLoading}\n                        onClick={saveForm}\n                    >\n                        {isLoading ? \"Loading...\" : \"Save\"}\n                    </Button>{\" \"}\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Cancel\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    );\n};\n\nexport default Media;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":4,"column":26,"nodeType":"50","messageId":"51","endLine":4,"endColumn":31},{"ruleId":"48","severity":1,"message":"52","line":6,"column":17,"nodeType":"50","messageId":"51","endLine":6,"endColumn":26},{"ruleId":"48","severity":1,"message":"53","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"55","line":18,"column":8,"nodeType":"56","endLine":18,"endColumn":24,"suggestions":"57"},{"ruleId":"48","severity":1,"message":"58","line":21,"column":5,"nodeType":"50","messageId":"51","endLine":21,"endColumn":15},{"ruleId":"54","severity":1,"message":"59","line":36,"column":8,"nodeType":"56","endLine":36,"endColumn":24,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":109,"column":30,"nodeType":"63","messageId":"64","endLine":121,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":112,"column":39,"nodeType":"67","messageId":"68","endLine":112,"endColumn":41},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'toast' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.media'. Either include it or remove the dependency array.","ArrayExpression",["71"],"'putRequest' is defined but never used.","React Hook useEffect has a missing dependency: 'loadMedias'. Either include it or remove the dependency array.",["72"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'total_cb_received', 'total_cb_received'.","ArrowFunctionExpression","unsafeRefs","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [props.media, props.media.id]",{"range":"77","text":"78"},"Update the dependencies array to be: [loadMedias, props.category]",{"range":"79","text":"80"},[567,583],"[props.media, props.media.id]",[884,900],"[loadMedias, props.category]"]